{"version":3,"sources":["components/Display.tsx","components/Button.tsx","components/EqualsButton.tsx","components/Buttons.tsx","Utils/Operations.tsx","App.tsx","index.tsx"],"names":["Display","calcSays","className","Button","props","onClick","inputFromBtn","val","EqualsButton","Buttons","newInput","handleDecimal","input","data","workingTotal","includes","operationHandler","operation","calculatingTotal","App","useState","setWorkingTotal","setCalculatingTotal","setOperation","calcDisp","setCalcDisp","newObj","handleNegative","calcTotal","handleOperation","offShoreDecisionMaker","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2bc3722d.chunk.js","sourcesContent":["\r\nimport React, { useState } from 'react';\r\nimport { Screen } from '../interfaces/Screen'\r\n\r\n\r\n\r\nexport const Display = ({calcSays}: {calcSays: string}): JSX.Element =>  {\r\n    return (\r\n        <div className=\"calculatorDisplay\">\r\n            {calcSays}\r\n        </div>\r\n    )\r\n\r\n}","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const Button = (props: {val: string,inputFromBtn: (incomingInput: string) => void}): JSX.Element => {\r\n\r\n    return (\r\n        <button className=\"calculatorButton\" onClick={()=>props.inputFromBtn(props.val)}> {props.val} </button>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const EqualsButton = (props: {val: string,inputFromBtn: (incomingInput: string) => void}): JSX.Element => {\r\n\r\n    return (\r\n        <button className=\"equalsButton\" onClick={()=>props.inputFromBtn(props.val)}> {props.val} </button>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from './Button';\r\nimport { EqualsButton } from './EqualsButton';\r\n\r\n\r\nexport const Buttons = (props: {newInput: (incomingInput: string) => void}): JSX.Element => {\r\n\r\n    return (\r\n    <div>\r\n            <div>\r\n                <Button val = \"AC\" inputFromBtn = {props.newInput}/>  \r\n                <Button val = \"C\" inputFromBtn = {props.newInput}/>  \r\n                <EqualsButton val = \"=\" inputFromBtn = {props.newInput}/>  \r\n  \r\n            </div>\r\n            <div>\r\n                <Button val = \"9\" inputFromBtn = {props.newInput}/>  \r\n                <Button val = \"8\" inputFromBtn = {props.newInput}/>  \r\n                <Button val = \"7\" inputFromBtn = {props.newInput}/>  \r\n                <Button val = \"*\" inputFromBtn = {props.newInput}/>  \r\n            </div>\r\n            <div>\r\n                <Button val = \"6\" inputFromBtn = {props.newInput}/>  \r\n                <Button val = \"5\" inputFromBtn = {props.newInput}/>  \r\n                <Button val = \"4\" inputFromBtn = {props.newInput}/>  \r\n                <Button val = \"/\" inputFromBtn = {props.newInput}/>  \r\n            </div>\r\n            <div>\r\n                <Button val = \"3\" inputFromBtn = {props.newInput}/>  \r\n                <Button val = \"2\" inputFromBtn = {props.newInput}/>  \r\n                <Button val = \"1\" inputFromBtn = {props.newInput}/>  \r\n                <Button val = \"+\" inputFromBtn = {props.newInput}/>  \r\n            </div>\r\n            <div>\r\n                <Button val = \"(-)\" inputFromBtn = {props.newInput}/>  \r\n                <Button val = \"0\" inputFromBtn = {props.newInput}/>  \r\n                <Button val = \".\" inputFromBtn = {props.newInput}/>  \r\n                <Button val = \"-\" inputFromBtn = {props.newInput}/>  \r\n            </div>\r\n        </div>\r\n    );\r\n}   \r\n\r\n","function handleOperation(data: {workingTotal: string, calculatingTotal: string, operation: string})  {\r\n\r\n    // takes in calculator data and performs mathematical operation based on operation<string> variable.\r\n\r\n        // returns data:\r\n            // workingTotal as the result of math ops\r\n            // calculatingTotal and operation cleared in preparation for immediate follow on math ops\r\n\r\n    let calcTotal: number =+ data.calculatingTotal; //converts to num   \r\n    let workingTotal: number =+ data.workingTotal;  //\r\n\r\n    switch(data.operation) {    // math ops based on operation sign\r\n        case (\"+\"): {\r\n            calcTotal += workingTotal;\r\n            data.workingTotal = \"\" + calcTotal;\r\n            break;\r\n        } \r\n        case (\"-\"): {\r\n            calcTotal -= workingTotal;\r\n            data.workingTotal = \"\" + calcTotal;\r\n            break;\r\n        }\r\n        case (\"*\"): {\r\n            calcTotal *= workingTotal;\r\n            data.workingTotal = \"\" + calcTotal;\r\n            break;\r\n        }\r\n        case (\"/\"): {\r\n            calcTotal /= workingTotal;\r\n            data.workingTotal = \"\" + calcTotal;\r\n            break;\r\n        }\r\n    }\r\n    data.calculatingTotal = \"\"; //clearing variables in prep for next problem  \r\n    data.operation = \"\";        //\r\n    return data;\r\n}\r\n\r\nfunction handleDecimal(input: string,data: {workingTotal: string, calculatingTotal: string, operation: string}) {\r\n\r\n    // takes in calculator data and adds decimal value\r\n\r\n        // returns data as decimal   \r\n\r\n    if (data.workingTotal.includes(\".\")) {  // concatenates string input to the workingTotal if it is aleady a decimal\r\n        data.workingTotal += input;\r\n    } else {    // adds input as multiplied by one tenth to create decimal value\r\n        let workingTotal: number =+ data.workingTotal;  // converting to num\r\n        let inputNum: number =+ input;                  //\r\n\r\n        workingTotal = workingTotal + inputNum * 0.1; // adding input as a tenth\r\n        data.workingTotal = \"\" + workingTotal;\r\n        return data;\r\n    }\r\n}\r\n\r\nfunction handleNegative(data: {workingTotal: string, calculatingTotal: string, operation: string}) {\r\n\r\n    // takes in calculator data and mulitplies the workingTotal by -1\r\n\r\n        // returns data as workingTotal * -1 -- turning neg -> pos or pos -> neg \r\n\r\n    let workingTotal: number =+data.workingTotal; // converting to num\r\n    workingTotal *= -1; // negating workingTotal\r\n    data.workingTotal = \"\" + workingTotal;\r\n    data.operation = \"\";\r\n    return data;\r\n\r\n}\r\n\r\nfunction operationHandler(input: string,data: {workingTotal: string, calculatingTotal: string, operation: string}) {\r\n\r\n    // takes in calculator data and adds or switches operation sign \r\n\r\n        // returns data as with desired operation sign value \r\n\r\n    if (data.operation !== \"\") {    // if operation previously inputted..\r\n        \r\n        data.workingTotal = data.calculatingTotal;  //variables reset ot handle math operations \r\n        data.workingTotal = \"\";  \r\n        data.operation = input  // switching existing operation to last inputted operation\r\n    } else {\r\n        data.operation = input;     // assigning operation to input\r\n        data.calculatingTotal = data.workingTotal;\r\n        data.workingTotal = \"\"; // clearing variables to prepare for follow input and ops\r\n    }\r\n\r\n    return data;\r\n\r\n}\r\n\r\nexport function offShoreDecisionMaker(input: string,data: {workingTotal: string, calculatingTotal: string, operation: string}) {\r\n\r\n    // takes in input from buttons and caluclator data FROM APP.TSX. Based on input & existing calcdata, decisions are made to manipulate calcdata\r\n    \r\n    switch(input) { // handles data based on input from buttons, calls handler functions as necessary\r\n        case (\"+\"): {\r\n            return operationHandler(input, data);\r\n        }\r\n        case (\"-\"): {\r\n            return operationHandler(input, data);\r\n        }\r\n        case (\"*\"): {\r\n            return operationHandler(input, data);\r\n        }\r\n        case (\"/\"): {\r\n            return operationHandler(input, data);\r\n        }\r\n        case (\".\"): { // sets all input to workingTotal varialbe after \".\" to be a decimal value\r\n            data.operation = input;\r\n            return data;\r\n        }\r\n        case (\"(-)\"): { // negates workingTotal variable\r\n            data.operation = input;\r\n            return handleNegative(data);\r\n        }\r\n        case (\"=\"): {   // calls function to solve equation\r\n            if ([\"+\",\"-\",\"*\",\"/\"].includes(data.operation)) {\r\n                return handleOperation(data);\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    if ([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"].includes(input)){ // in the input is (basically) an int\r\n        if (data.operation === \".\") {\r\n            handleDecimal(input, data);\r\n        } else if (data.workingTotal.includes(\".\")) {\r\n            handleDecimal(input,data);\r\n        } else {\r\n            data.workingTotal+=input;\r\n        }\r\n    }\r\n    return data;\r\n}\r\n\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport './App.css'\r\nimport { Display } from './components/Display'\r\nimport { Buttons } from './components/Buttons'\r\nimport { offShoreDecisionMaker } from './Utils/Operations'\r\n\r\nfunction App(): JSX.Element  {\r\n  const [workingTotal, setWorkingTotal] = useState<string>(\"\");\r\n  const [calculatingTotal, setCalculatingTotal] = useState<string>(\"\");\r\n  const [operation, setOperation] = useState<string>(\"\");\r\n  const [calcDisp, setCalcDisp] = useState<string>(\"\");\r\n\r\n  const handleInput = (input: string) => {\r\n\r\n    let calcData = {workingTotal, calculatingTotal, operation}; // create an object to store and pass the calculator data\r\n\r\n    let newObj = offShoreDecisionMaker(input, calcData); // passing calcData to manipulate calculator data based on input\r\n\r\n    if (input === \"AC\") { // clear all variables if AC pressed\r\n      setCalculatingTotal(\"\");\r\n      setWorkingTotal(\"\");\r\n      setOperation(\"\");\r\n      newObj.workingTotal = \"\";\r\n      newObj.calculatingTotal = \"\";\r\n      newObj.operation = \"\";\r\n      setCalculatingTotal(\"\");\r\n    } else if (input === \"C\") { // clear workingTotal on C pressed\r\n      setWorkingTotal(\"\");\r\n      newObj.workingTotal = \"\";\r\n    }\r\n    setWorkingTotal(newObj.workingTotal);         //\r\n    setOperation(newObj.operation);               // updating calculator data after offShore manipulation \r\n    setCalculatingTotal(newObj.calculatingTotal); // \r\n    console.log(newObj);\r\n    setCalcDisp(newObj.calculatingTotal+newObj.operation+newObj.workingTotal); // building calc display string\r\n    }\r\n\r\n    // React; what a wild ride\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div>\r\n          <Display calcSays = {calcDisp}></Display>\r\n          <Buttons newInput = {handleInput} ></Buttons>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n\n\n"],"sourceRoot":""}