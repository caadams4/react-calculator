{"version":3,"sources":["components/Display.tsx","components/Button.tsx","components/Buttons.tsx","Utils/Operations.tsx","App.tsx","index.tsx"],"names":["Display","calcSays","className","Button","props","onClick","inputFromBtn","val","Buttons","newInput","operationHandler","input","data","operation","workingTotal","calculatingTotal","offShoreDecisionMaker","handleNegative","includes","calcTotal","handleOperation","console","log","handleDecimal","calcHist","App","useState","setWorkingTotal","setCalculatingTotal","setOperation","calcDisp","setCalcDisp","calcWorkingData","push","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dbd21364.chunk.js","sourcesContent":["\r\nimport React, { useState } from 'react';\r\nimport { Screen } from '../interfaces/Screen'\r\n\r\n\r\n\r\nexport const Display = ({calcSays}: {calcSays: string}): JSX.Element =>  {\r\n    return (\r\n        <div className=\"calculatorDisplay\">\r\n            {calcSays}\r\n        </div>\r\n    )\r\n\r\n}","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const Button = (props: {val: string,inputFromBtn: (incomingInput: string) => void}): JSX.Element => {\r\n\r\n    return (\r\n        <button className=\"calculatorButton\" onClick={()=>props.inputFromBtn(props.val)}> {props.val} </button>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport { Button } from './Button';\r\n\r\n\r\nexport const Buttons = (props: {newInput: (incomingInput: string) => void}): JSX.Element => {\r\n\r\n    return (\r\n    <div>\r\n            <div className=\"calcRow\">\r\n                <Button val = \"AC\" inputFromBtn = {props.newInput}/>  \r\n                <Button val = \"C\" inputFromBtn = {props.newInput}/> \r\n                <Button val = \"<-\" inputFromBtn = {props.newInput}/>\r\n                <Button val = \"=\" inputFromBtn = {props.newInput}/>  \r\n  \r\n            </div>\r\n            <div className=\"calcRow\">\r\n                <Button val = \"9\" inputFromBtn = {props.newInput}/>  \r\n                <Button val = \"8\" inputFromBtn = {props.newInput}/>  \r\n                <Button val = \"7\" inputFromBtn = {props.newInput}/>  \r\n                <Button val = \"*\" inputFromBtn = {props.newInput}/>  \r\n            </div>\r\n            <div className=\"calcRow\">\r\n                <Button val = \"6\" inputFromBtn = {props.newInput}/>  \r\n                <Button val = \"5\" inputFromBtn = {props.newInput}/>  \r\n                <Button val = \"4\" inputFromBtn = {props.newInput}/>  \r\n                <Button val = \"/\" inputFromBtn = {props.newInput}/>  \r\n            </div>\r\n            <div className=\"calcRow\">\r\n                <Button val = \"3\" inputFromBtn = {props.newInput}/>  \r\n                <Button val = \"2\" inputFromBtn = {props.newInput}/>  \r\n                <Button val = \"1\" inputFromBtn = {props.newInput}/>  \r\n                <Button val = \"+\" inputFromBtn = {props.newInput}/>  \r\n            </div>\r\n            <div className=\"calcRow\">\r\n                <Button val = \"(-)\" inputFromBtn = {props.newInput}/>  \r\n                <Button val = \"0\" inputFromBtn = {props.newInput}/>  \r\n                <Button val = \".\" inputFromBtn = {props.newInput}/>  \r\n                <Button val = \"-\" inputFromBtn = {props.newInput}/>  \r\n            </div>\r\n        </div>\r\n    );\r\n}   \r\n\r\n","\r\nimport { calcData } from '../interfaces/calcData'\r\n\r\nfunction handleOperation(data: calcData ):calcData  {\r\n\r\n    // takes in calculator data and performs mathematical operation based on operation<string> variable.\r\n\r\n        // returns data:\r\n            // workingTotal as the result of math ops\r\n            // calculatingTotal and operation cleared in preparation for immediate follow on math ops\r\n\r\n    let calcTotal: number =+ data.calculatingTotal; //converts to num   \r\n    let workingTotal: number =+ data.workingTotal;  //\r\n\r\n    switch(data.operation) {    // math ops based on operation sign\r\n        case (\"+\"): {\r\n            calcTotal += workingTotal;\r\n            data.workingTotal = \"\" + calcTotal;\r\n            break;\r\n        } \r\n        case (\"-\"): {\r\n            calcTotal -= workingTotal;\r\n            data.workingTotal = \"\" + calcTotal;\r\n            break;\r\n        }\r\n        case (\"*\"): {\r\n            calcTotal *= workingTotal;\r\n            data.workingTotal = \"\" + calcTotal;\r\n            break;\r\n        }\r\n        case (\"/\"): {\r\n            calcTotal /= workingTotal;\r\n            data.workingTotal = \"\" + calcTotal;\r\n            break;\r\n        }\r\n    }\r\n    data.calculatingTotal = \"\"; //clearing variables in prep for next problem  \r\n    data.operation = \"\";        //\r\n    return data;\r\n}\r\n\r\nfunction handleDecimal(input: string,data: calcData ): calcData {\r\n\r\n    // takes in calculator data and adds decimal value\r\n\r\n        // returns data as decimal   \r\n    if (data.workingTotal.includes(\".\") || input === \".\") {  // concatenates string input to the workingTotal if it is aleady a decimal\r\n        data.workingTotal += input;\r\n    } else {    // adds input as multiplied by one tenth to create decimal value\r\n        let workingTotal: number =+ data.workingTotal;  // converting to num\r\n        let inputNum: number =+ input;                  //\r\n\r\n        workingTotal = workingTotal + inputNum * 0.1; // adding input as a tenth\r\n        data.workingTotal = \"\" + workingTotal;\r\n\r\n    }\r\n    console.log(data.workingTotal)\r\n    return data;\r\n}\r\n\r\nfunction handleNegative(data: calcData ): calcData {\r\n\r\n    // takes in calculator data and mulitplies the workingTotal by -1\r\n\r\n        // returns data as workingTotal * -1 -- turning neg -> pos or pos -> neg \r\n    if (data.workingTotal === \"\" && data.operation !== \"\" && data.calculatingTotal !== \"\") {\r\n        if (data.operation === \"+\") data.operation = \"-\";\r\n        else if (data.operation === \"-\") data.operation = \"+\";\r\n    } else {\r\n        let workingTotal: number =+data.workingTotal; // converting to num\r\n        workingTotal *= -1; // negating workingTotal\r\n        data.workingTotal = \"\" + workingTotal;\r\n    \r\n\r\n    }\r\n\r\n\r\n    return data;\r\n\r\n}\r\n\r\nfunction operationHandler(input: string, data: calcData): calcData {\r\n\r\n    // takes in calculator data and adds or switches operation sign \r\n\r\n        // returns data as with desired operation sign value \r\n\r\n    if (data.operation !== \"\") {    // if operation previously inputted..\r\n        data.workingTotal = data.calculatingTotal;  //variables reset ot handle math operations \r\n        data.workingTotal = \"\";  \r\n        data.operation = input  // switching existing operation to last inputted operation\r\n    } else {\r\n        data.operation = input;     // assigning operation to input\r\n        data.calculatingTotal = data.workingTotal;\r\n        data.workingTotal = \"\"; // clearing variables to prepare for follow input and ops\r\n    }\r\n\r\n    return data;\r\n\r\n}\r\n\r\nexport function offShoreDecisionMaker(input: string, data: calcData ): calcData {\r\n\r\n    // takes in input from buttons and caluclator data FROM APP.TSX. Based on input & existing calcdata, decisions are made to manipulate calcdata\r\n    \r\n    switch(input) { // handles data based on input from buttons, calls handler functions as necessary\r\n        case (\"+\"): {\r\n            return operationHandler(input, data);\r\n        }\r\n        case (\"-\"): {\r\n            return operationHandler(input, data);\r\n        }\r\n        case (\"*\"): {\r\n            return operationHandler(input, data);\r\n        }\r\n        case (\"/\"): {\r\n            return operationHandler(input, data);\r\n        }\r\n        case (\"(-)\"): { // negates workingTotal variable\r\n            return handleNegative(data);\r\n        }\r\n        case (\"=\"): {   // calls function to solve equation\r\n            if ([\"+\",\"-\",\"*\",\"/\"].includes(data.operation)) {\r\n                return handleOperation(data);\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    if (input === \".\") {\r\n        handleDecimal(input,data);\r\n    }\r\n    if ([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"].includes(input)){ // in the input is (basically) an int\r\n        data.workingTotal+=input;\r\n    }\r\n    return data;\r\n}\r\n\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport './App.css'\r\nimport { Display } from './components/Display'\r\nimport { Buttons } from './components/Buttons'\r\nimport { offShoreDecisionMaker } from './Utils/Operations'\r\nimport { calcData } from './interfaces/calcData'\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport { Container,Button } from 'react-bootstrap';\r\n\r\nlet calcHist: calcData[] = [];\r\n\r\nfunction App(): JSX.Element  {\r\n  const [workingTotal, setWorkingTotal] = useState<string>(\"\");\r\n  const [calculatingTotal, setCalculatingTotal] = useState<string>(\"\");\r\n  const [operation, setOperation] = useState<string>(\"\");\r\n  const [calcDisp, setCalcDisp] = useState<string>(\"\");\r\n\r\n  let newObj: calcData;\r\n\r\n  let calcWorkingData: calcData = {\r\n    workingTotal,\r\n    calculatingTotal,\r\n    operation\r\n  }\r\n\r\n  const handleInput = (input: string) => {\r\n\r\n    calcWorkingData = offShoreDecisionMaker(input, calcWorkingData); // passing calcData to manipulate calculator data based on input\r\n\r\n    if (input === \"AC\") { // clear all variables if AC pressed\r\n      setCalculatingTotal(\"\");\r\n      setWorkingTotal(\"\");\r\n      setOperation(\"\");\r\n      calcWorkingData.workingTotal = \"\";\r\n      calcWorkingData.calculatingTotal = \"\";\r\n      calcWorkingData.operation = \"\";\r\n      setCalculatingTotal(\"\");\r\n    } else if (input === \"C\") { // clear workingTotal on C pressed\r\n      setWorkingTotal(\"\"); \r\n      calcWorkingData.workingTotal = \"\";\r\n    } \r\n\r\n    setWorkingTotal(calcWorkingData.workingTotal);         //\r\n    setOperation(calcWorkingData.operation);               // updating calculator data after offShore manipulation \r\n    setCalculatingTotal(calcWorkingData.calculatingTotal); // \r\n    console.log(calcWorkingData);\r\n    setCalcDisp(calcWorkingData.calculatingTotal+calcWorkingData.operation+calcWorkingData.workingTotal); // building calc display string\r\n\r\n    calcHist.push(calcWorkingData);\r\n    console.log(calcHist)\r\n    }\r\n\r\n    // React; what a wild ride\r\n\r\n  return (\r\n    <div className=\"body\">\r\n      <div className=\"App\">\r\n          <Display calcSays = {calcDisp}></Display>\r\n          <Buttons newInput = {handleInput} ></Buttons>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <div className= \"body\">\n    <App />\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n\n\n"],"sourceRoot":""}